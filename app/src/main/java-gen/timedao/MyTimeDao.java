package timedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MY_TIME.
*/
public class MyTimeDao extends AbstractDao<MyTime, Long> {

    public static final String TABLENAME = "MY_TIME";

    /**
     * Properties of entity MyTime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timecode = new Property(1, String.class, "timecode", false, "TIMECODE");
        public final static Property Timetype = new Property(2, int.class, "timetype", false, "TIMETYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Year = new Property(4, Integer.class, "year", false, "YEAR");
        public final static Property Monthofyear = new Property(5, Integer.class, "monthofyear", false, "MONTHOFYEAR");
        public final static Property Dayofmonth = new Property(6, Integer.class, "dayofmonth", false, "DAYOFMONTH");
        public final static Property Dayofweek = new Property(7, int.class, "dayofweek", false, "DAYOFWEEK");
        public final static Property Starthour = new Property(8, int.class, "starthour", false, "STARTHOUR");
        public final static Property Startmin = new Property(9, int.class, "startmin", false, "STARTMIN");
        public final static Property Endhour = new Property(10, int.class, "endhour", false, "ENDHOUR");
        public final static Property Endmin = new Property(11, int.class, "endmin", false, "ENDMIN");
        public final static Property Startmillis = new Property(12, Long.class, "startmillis", false, "STARTMILLIS");
        public final static Property Endmillis = new Property(13, Long.class, "endmillis", false, "ENDMILLIS");
        public final static Property Memo = new Property(14, String.class, "memo", false, "MEMO");
        public final static Property Place = new Property(15, String.class, "place", false, "PLACE");
        public final static Property Lat = new Property(16, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(17, Double.class, "lng", false, "LNG");
        public final static Property Share = new Property(18, Integer.class, "share", false, "SHARE");
        public final static Property Alarm = new Property(19, Long.class, "alarm", false, "ALARM");
        public final static Property Repeat = new Property(20, String.class, "repeat", false, "REPEAT");
        public final static Property Color = new Property(21, String.class, "color", false, "COLOR");
    };


    public MyTimeDao(DaoConfig config) {
        super(config);
    }
    
    public MyTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MY_TIME' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TIMECODE' TEXT NOT NULL ," + // 1: timecode
                "'TIMETYPE' INTEGER NOT NULL ," + // 2: timetype
                "'NAME' TEXT," + // 3: name
                "'YEAR' INTEGER," + // 4: year
                "'MONTHOFYEAR' INTEGER," + // 5: monthofyear
                "'DAYOFMONTH' INTEGER," + // 6: dayofmonth
                "'DAYOFWEEK' INTEGER NOT NULL ," + // 7: dayofweek
                "'STARTHOUR' INTEGER NOT NULL ," + // 8: starthour
                "'STARTMIN' INTEGER NOT NULL ," + // 9: startmin
                "'ENDHOUR' INTEGER NOT NULL ," + // 10: endhour
                "'ENDMIN' INTEGER NOT NULL ," + // 11: endmin
                "'STARTMILLIS' INTEGER," + // 12: startmillis
                "'ENDMILLIS' INTEGER," + // 13: endmillis
                "'MEMO' TEXT," + // 14: memo
                "'PLACE' TEXT," + // 15: place
                "'LAT' REAL," + // 16: lat
                "'LNG' REAL," + // 17: lng
                "'SHARE' INTEGER," + // 18: share
                "'ALARM' INTEGER," + // 19: alarm
                "'REPEAT' TEXT," + // 20: repeat
                "'COLOR' TEXT);"); // 21: color
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MY_TIME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyTime entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTimecode());
        stmt.bindLong(3, entity.getTimetype());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(5, year);
        }
 
        Integer monthofyear = entity.getMonthofyear();
        if (monthofyear != null) {
            stmt.bindLong(6, monthofyear);
        }
 
        Integer dayofmonth = entity.getDayofmonth();
        if (dayofmonth != null) {
            stmt.bindLong(7, dayofmonth);
        }
        stmt.bindLong(8, entity.getDayofweek());
        stmt.bindLong(9, entity.getStarthour());
        stmt.bindLong(10, entity.getStartmin());
        stmt.bindLong(11, entity.getEndhour());
        stmt.bindLong(12, entity.getEndmin());
 
        Long startmillis = entity.getStartmillis();
        if (startmillis != null) {
            stmt.bindLong(13, startmillis);
        }
 
        Long endmillis = entity.getEndmillis();
        if (endmillis != null) {
            stmt.bindLong(14, endmillis);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(15, memo);
        }
 
        String place = entity.getPlace();
        if (place != null) {
            stmt.bindString(16, place);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(17, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(18, lng);
        }
 
        Integer share = entity.getShare();
        if (share != null) {
            stmt.bindLong(19, share);
        }
 
        Long alarm = entity.getAlarm();
        if (alarm != null) {
            stmt.bindLong(20, alarm);
        }
 
        String repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindString(21, repeat);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(22, color);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyTime readEntity(Cursor cursor, int offset) {
        MyTime entity = new MyTime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // timecode
            cursor.getInt(offset + 2), // timetype
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // monthofyear
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // dayofmonth
            cursor.getInt(offset + 7), // dayofweek
            cursor.getInt(offset + 8), // starthour
            cursor.getInt(offset + 9), // startmin
            cursor.getInt(offset + 10), // endhour
            cursor.getInt(offset + 11), // endmin
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // startmillis
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // endmillis
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // memo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // place
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // lat
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // lng
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // share
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // alarm
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // repeat
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // color
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyTime entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimecode(cursor.getString(offset + 1));
        entity.setTimetype(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMonthofyear(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDayofmonth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDayofweek(cursor.getInt(offset + 7));
        entity.setStarthour(cursor.getInt(offset + 8));
        entity.setStartmin(cursor.getInt(offset + 9));
        entity.setEndhour(cursor.getInt(offset + 10));
        entity.setEndmin(cursor.getInt(offset + 11));
        entity.setStartmillis(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setEndmillis(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setMemo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPlace(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLat(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setLng(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setShare(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setAlarm(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setRepeat(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setColor(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MyTime entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MyTime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
